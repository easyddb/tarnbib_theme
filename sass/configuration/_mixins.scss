// Media query
//==========================================================================

@mixin respond-to($media) {
	// Sizes
	@if $media == small {
		@media only screen and (max-width: $breakpoint-small) { @content; }
	}

	@else if $media == small-medium {
		@media only screen and (max-width: $breakpoint-medium) { @content; }
	}

  @if $media == small-medium-low {
    @media only screen and (max-height: $breakpoint-low) and (max-width: $breakpoint-medium) { @content; }
  }

	@else if $media == medium {
		@media only screen and (min-width: $breakpoint-small + 1) and (max-width: $breakpoint-medium) { @content; }
	}

	@else if $media == medium-large {
		@media only screen and (min-width: $breakpoint-small + 1) and (max-width: $breakpoint-large) { @content; }
	}

  @else if $media == large {
    @media only screen and (min-width: $breakpoint-medium + 1) and (max-width: $breakpoint-large) { @content; }
  }

  @else if $media == x-large {
    @media only screen and (min-width: $breakpoint-x-large + 1) { @content; }
  }

  @else if $media == till-x-large {
		@media only screen and (max-width: $breakpoint-x-large) { @content; }
	}

  @else if $media == large-x-large {
    @media only screen and (min-width: $breakpoint-medium + 1) { @content; }
  }
}


// Breakpoints
//==========================================================================

@mixin small {
  @include respond-to(small) { @content; }
}

@mixin small-medium {
  @include respond-to(small-medium) { @content; }
}

@mixin small-medium-low {
  @include respond-to(small-medium-low) { @content; }
}

@mixin medium {
  @include respond-to(medium) { @content; }
}

@mixin medium-large {
  @include respond-to(medium-large) { @content; }
}

@mixin large {
  @include respond-to(large) { @content; }
}

@mixin x-large {
  @include respond-to(x-large) { @content; }
}

@mixin till-x-large {
  @include respond-to(till-x-large) { @content; }
}

@mixin large-x-large {
  @include respond-to(large-x-large) { @content; }
}



// Availability
//==========================================================================

@mixin availability($bg-color) {
  background-color: $bg-color;
  color: $white;
  padding-top: 5px;
  padding-right: 10px;
  padding-bottom: 5px;
  padding-left: 10px;

  a {
    color: $white;
    display: block;

    &:hover {
      text-decoration: none;
    }
  }
}



// Typography mixins
//==========================================================================

// Function for converting a px based font-size to rem.
@function calculate-rem($size) {
  $remSize: $size / 16px;

  // Default font size on html element is 100%, equivalent to 16px;

  @return #{$remSize}rem;
}

// Mixin that will include the fall back px declaration as well as the calculated rem value.

@mixin font-size($size) {
  font-size: $size;
  font-size: calculate-rem($size);
}



// Placeholder text color
//==========================================================================

@mixin placeholder($color: $input-color-placeholder) {
  &:-moz-placeholder            { color: $color; } // Firefox 4-18
  &::-moz-placeholder           { color: $color; } // Firefox 19+
  &:-ms-input-placeholder       { color: $color; } // Internet Explorer 10+
  &::-webkit-input-placeholder  { color: $color; } // Safari and Chrome
}



// Selection color
//==========================================================================

$prefixes: ("-moz-", "-webkit-", "");
@mixin selection($color, $background) {
  @each $prefix in $prefixes {
    ::#{$prefix}selection {
      color: $color;
      background: $background;
    }
  }
}



// Reset filters for IE
//==========================================================================

// When you need to remove a gradient background, do not forget to use this to reset
// the IE filter for IE9 and below.

@mixin reset-filter() {
  filter: progid:DXImageTransform.Microsoft.gradient(enabled = false);
}



// Shadow
//==========================================================================

@mixin bshadow() {
  @include box-shadow($gray 1px 1px 20px);
}
